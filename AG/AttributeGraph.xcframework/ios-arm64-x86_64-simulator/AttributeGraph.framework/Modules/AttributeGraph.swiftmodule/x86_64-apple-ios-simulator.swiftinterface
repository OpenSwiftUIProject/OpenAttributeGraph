// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AttributeGraph
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import AttributeGraph
import Foundation
import Swift
import _Concurrency
import _StringProcessing

// MARK: - Attribute Related

// MARK: - AGAttribute

extension AGAttribute {
	public init<Value>(_ attribute: AttributeGraph.Attribute<Value>)
	public func unsafeCast<Value>(to type: Value.Type) -> AttributeGraph.Attribute<Value>
	public static var current: AGAttribute? { get }
	public func unsafeOffset(at offset: Int) -> AGAttribute
	public func setFlags(_ newFlags: AGAttributeFlags, mask: AGAttributeFlags)
	public func addInput(_ attribute: AGAttribute, options: AGInputOptions = [], token: Swift.Int)
	public func addInput<Value>(_ attribute: AttributeGraph.Attribute<Value>, options: AGInputOptions = [], token: Int)
	public func visitBody<Visitor: AttributeGraph.AttributeBodyVisitor>(_ visitor: inout Visitor);
	public func mutateBody<Value>(as: Value.Type, invalidating: Swift.Bool, _ body: (inout Value) -> ())
	public func breadthFirstSearch(options: AGSearchOptions = [], _: (AGAttribute) -> Swift.Bool) -> Swift.Bool
	public var _bodyType: Any.Type { get }
	public var _bodyPointer: UnsafeRawPointer { get }
	public var valueType: Any.Type { get }
	public var indirectDependency: AGAttribute? {
		get
		nonmutating set
	}
}

extension AGAttribute: Swift.CustomStringConvertible {
	public var description: Swift.String { get }
}

public typealias AttributeUpdateBlock = () -> ((Swift.UnsafeMutableRawPointer, AGAttribute) -> Void)

// MARK: - Attribute

@frozen
@propertyWrapper
@dynamicMemberLookup
public struct Attribute<Value> {
    public var identifier: AGAttribute

    public init(identifier: AGAttribute)
    public init(_ attribute: AttributeGraph.Attribute<Value>)
	public init(value: Value)
	public init(type: Value.Type)
	public init<Body: AttributeGraph._AttributeBody>(body: Swift.UnsafePointer<Body>, value: Swift.UnsafePointer<Value>?, flags: AGAttributeTypeFlags, update: AttributeUpdateBlock)
	public var wrappedValue: Value {
		unsafeAddress
		nonmutating set
	}
	public var projectedValue: AttributeGraph.Attribute<Value> { get _modify }
  
    public subscript<Member>(dynamicMember _: Swift.KeyPath<Value, Member>) -> AttributeGraph.Attribute<Member> { get }
    public subscript<Member>(keyPath _: Swift.KeyPath<Value, Member>) -> AttributeGraph.Attribute<Member> { get }
	public subscript<Member>(offset body: (inout Value) -> AttributeGraph.PointerOffset<Value, Member>) -> AttributeGraph.Attribute<Member> { get }

	public func unsafeCast<V>(to type: V.Type) -> AttributeGraph.Attribute<V>
	public func unsafeOffset<Member>(at offset: Swift.Int, as type: Member.Type) -> AttributeGraph.Attribute<Member>
	public func applying<Member>(offset: AttributeGraph.PointerOffset<Value, Member>) -> AttributeGraph.Attribute<Member>
	public func visitBody<Body: AttributeGraph.AttributeBodyVisitor>(_ visitor: inout Body)
	public func mutateBody<V>(as type: V.Type, invalidating: Swift.Bool, _ body: (inout V) -> Swift.Void)
	public func breadthFirstSearch(options: AGSearchOptions = [], _ body: (AGAttribute) -> Swift.Bool) -> Swift.Bool

	public var graph: AGGraph { get }
	public var subgraph: AGSubgraph { get }

	public var value: Value { unsafeAddress set }
	public var valueState: AGValueState { get }
	public func valueAndFlags(options: AGValueOptions = []) -> (value: Value, flags: AGChangedValueFlags)
	public func changedValue(options: AGValueOptions = []) -> (value: Value, changed: Bool)
	public func setValue(_ value: Value) -> Bool
	public var hasValue: Bool { get }
	public func updateValue()
	public func prefetchValue()
	public func invalidateValue()
	public func validate()

	public func addInput(_ attribute: AGAttribute, options: AGInputOptions = [], token: Swift.Int)
	public func addInput<V>(_ attribute: AttributeGraph.Attribute<V>, options: AGInputOptions = [], token: Int)

	public var flags: AGAttributeFlags { get _modify }
	public func setFlags(_ newFlags: AGAttributeFlags, mask: AGAttributeFlags)
}

extension AttributeGraph.Attribute: Swift.Hashable {
    public func hash(into hasher: inout Swift.Hasher)
	public static func == (lhs: AttributeGraph.Attribute<Value>, rhs: AttributeGraph.Attribute<Value>) -> Swift.Bool
    public var hashValue: Swift.Int { get }
}

extension AttributeGraph.Attribute: Swift.CustomStringConvertible {
	public var description: String { get }
}

extension AttributeGraph.Attribute {
	public init<R: AttributeGraph.Rule>(_ rule: R) where R.Value == Value
	public init<R: AttributeGraph.StatefulRule>(_ rule: R) where R.Value == Value
}

// MARK: - AGWeakAttribute

extension AGWeakAttribute {
	@_alwaysEmitIntoClient
	public init(_ attribute: AGAttribute?) {
		self = __AGCreateWeakAttribute(attribute ?? .nil)
	}

	@_alwaysEmitIntoClient
	public init<Value>(_ weakAttribute: AttributeGraph.WeakAttribute<Value>) {
		self = weakAttribute.base
	}

	@_alwaysEmitIntoClient
	public func unsafeCast<Value>(to type: Value.Type) -> AttributeGraph.WeakAttribute<Value> {
		WeakAttribute(base: self)
	}

	@_alwaysEmitIntoClient
	public var attribute: AGAttribute? {
		get {
			let attribute = __AGWeakAttributeGetAttribute(self)
			return attribute == .nil ? nil : attribute
		}
		set {
			self = AGWeakAttribute(newValue)
		}
		_modify {
			var value = attribute
			yield &value
			attribute = value
		}
	}
}

extension AGWeakAttribute: Hashable {
	@_alwaysEmitIntoClient
	public func hash(into hasher: inout Swift.Hasher) {
		hasher.combine(raw_attribute)
		hasher.combine(subgraph_id)
	}

	@_alwaysEmitIntoClient
	public static func == (lhs: AGWeakAttribute, rhs: AGWeakAttribute) -> Swift.Bool {
		lhs.raw_attribute == rhs.raw_attribute && lhs.subgraph_id == rhs.subgraph_id
	}

	@_alwaysEmitIntoClient
	public var hashValue: Int {
		_hashValue(for: self)
	}
}

extension AGWeakAttribute: CustomStringConvertible {
	@_alwaysEmitIntoClient
	public var description: String {
		attribute?.description ?? "nil"
	}
}


// MARK: - WeakAttribute

@frozen
@propertyWrapper
@dynamicMemberLookup
public struct WeakAttribute<Value> {
	@usableFromInline
	internal var base: AGWeakAttribute
	@_alwaysEmitIntoClient
	public init(base: AGWeakAttribute) { self.base = base }
	public init()
	public init(_ attribute: AttributeGraph.Attribute<Value>)
	public init(_ attribute: AttributeGraph.Attribute<Value>?)
	public var wrappedValue: Value? { get }
	public var projectedValue: AttributeGraph.Attribute<Value>?{ get set _modify }
	public subscript<Member>(dynamicMember keyPath: Swift.KeyPath<Value, Member>) -> AttributeGraph.Attribute<Member>? { get }
	public var attribute: AttributeGraph.Attribute<Value>? { get set _modify }
	public var value: Value? { get }
	public func changedValue(options: AGValueOptions = []) -> (value: Value, changed: Swift.Bool)?
}

extension AttributeGraph.WeakAttribute: Swift.Hashable {
	public func hash(into hasher: inout Swift.Hasher)
	public static func == (lhs: AttributeGraph.WeakAttribute<Value>, rhs: AttributeGraph.WeakAttribute<Value>) -> Swift.Bool
	public var hashValue: Swift.Int { get }
}

extension AttributeGraph.WeakAttribute: Swift.CustomStringConvertible {
	public var description: Swift.String { get }
}

// MARK: - OptionalAttribute

@frozen
public struct AnyOptionalAttribute {
	public init()
	public init(_ attribute: AGAttribute)
	public init(_ attribute: AGAttribute?)
	public init<Value>(_ attribute: AttributeGraph.OptionalAttribute<Value>)
	public var identifier: AGAttribute
	public static var current: AttributeGraph.AnyOptionalAttribute { get }
	public var attribute: AGAttribute? { get set _modify }
	public func map<Value>(_ body: (AGAttribute) -> Value) -> Value?
	public func unsafeCast<Value>(to type: Value.Type) -> AttributeGraph.OptionalAttribute<Value>
}
extension AttributeGraph.AnyOptionalAttribute: Swift.Hashable {
	public func hash(into hasher: inout Swift.Hasher)
	public static func == (lhs: AttributeGraph.AnyOptionalAttribute, rhs: AttributeGraph.AnyOptionalAttribute) -> Swift.Bool
	public var hashValue: Swift.Int { get }
}
extension AttributeGraph.AnyOptionalAttribute: Swift.CustomStringConvertible {
	public var description: Swift.String { get }
}

@frozen
@propertyWrapper
@dynamicMemberLookup
public struct OptionalAttribute<Value> {
	public var base: AttributeGraph.AnyOptionalAttribute
	public init()
	public init(base: AttributeGraph.AnyOptionalAttribute)
	public init(_ attribute: AttributeGraph.Attribute<Value>)
	public init(_ attribute: AttributeGraph.Attribute<Value>?)
	public init(_ weakAttribute: AttributeGraph.WeakAttribute<Value>)
	public var attribute: AttributeGraph.Attribute<Value>? { get set _modify }
	public var value: Value? { get }
	public func changedValue(options: AGValueOptions = []) -> (value: Value, changed: Bool)?
	public func map<V>(_ body: (AttributeGraph.Attribute<Value>) -> V) -> V?
	public var wrappedValue: Value? { get }
	public var projectedValue: Attribute<Value>? { get set _modify }
	public subscript<Member>(dynamicMember keyPath: KeyPath<Value, Member>) -> Attribute<Member>? { get }
}

extension AttributeGraph.OptionalAttribute: Swift.Hashable {
	public func hash(into hasher: inout Swift.Hasher)
	public static func == (lhs: AttributeGraph.OptionalAttribute<Value>, rhs: AttributeGraph.OptionalAttribute<Value>) -> Swift.Bool
	public var hashValue: Swift.Int { get }
}

extension AttributeGraph.OptionalAttribute: Swift.CustomStringConvertible {
	public var description: Swift.String { get }
}

// MARK: - IndirectAttribute

@frozen
@propertyWrapper
@dynamicMemberLookup
public struct IndirectAttribute<Value> {
	public let identifier: AGAttribute
	public init(source: AttributeGraph.Attribute<Value>)
	public var source: AttributeGraph.Attribute<Value> {
		get
		nonmutating set
		nonmutating _modify
	}
	public var dependency: AGAttribute? {
		get
		nonmutating set
		nonmutating _modify
	}
	public var value: Value {
		get
		nonmutating set
		nonmutating _modify
	}
	public func changedValue(options: AGValueOptions = []) -> (value: Value, changed: Bool)
	public var wrappedValue: Value {
		get
		nonmutating set
		nonmutating _modify
	}
	public var projectedValue: AttributeGraph.Attribute<Value> { get }
	public subscript<Member>(dynamicMember keyPath: KeyPath<Value, Member>) -> AttributeGraph.Attribute<Member> { get }
}

extension AttributeGraph.IndirectAttribute: Swift.Hashable {
	public func hash(into hasher: inout Swift.Hasher)
	public static func == (lhs: AttributeGraph.IndirectAttribute<Value>, rhs: AttributeGraph.IndirectAttribute<Value>) -> Swift.Bool
	public var hashValue: Swift.Int { get }
}

// MARK: - _AttributeBody

public protocol _AttributeBody {
    static func _destroySelf(_ pointer: Swift.UnsafeMutableRawPointer)
    static var _hasDestroySelf: Swift.Bool { get }
    static func _updateDefault(_ pointer: Swift.UnsafeMutableRawPointer)
    static var comparisonMode: AGComparisonMode { get }
    static var flags: AGAttributeTypeFlags { get }
}

extension AttributeGraph._AttributeBody {
    public static func _destroySelf(_ pointer: Swift.UnsafeMutableRawPointer)
    public static var _hasDestroySelf: Swift.Bool { get }
    public static func _updateDefault(_ pointer: Swift.UnsafeMutableRawPointer)
    public static var comparisonMode: AGComparisonMode { get }
    public static var flags: AGAttributeTypeFlags { get }
}

// MARK: - AttributeBodyVisitor

public protocol AttributeBodyVisitor {
    func visit<Body: AttributeGraph._AttributeBody>(body: Swift.UnsafePointer<Body>)
}

// MARK: - External

@frozen
public struct External<Value> {
	public init()
}

extension AttributeGraph.External: AttributeGraph._AttributeBody {
	public static var comparisonMode: AGComparisonMode { get }
	public static var flags: AGAttributeTypeFlags { get }
	public static func _update(_: Swift.UnsafeMutableRawPointer, attribute: AGAttribute)
}

extension AttributeGraph.External: Swift.CustomStringConvertible {
	public var description: Swift.String { get }
}

// MARK: - Focus

@frozen
public struct Focus<Root, Value> {
    public var root: Attribute<Root>
    public var keyPath: KeyPath<Root, Value>
    
    public init(root: Attribute<Root>, keyPath: KeyPath<Root, Value>)
}

extension AttributeGraph.Focus: AttributeGraph.Rule {
	public var value: Self.Value { get }
	public static var flags: AGAttributeTypeFlags { get }
}

extension AttributeGraph.Focus: Swift.CustomStringConvertible {
	public var description: Swift.String { get }
}

// MARK: - ObservedAttribute

public protocol ObservedAttribute: AttributeGraph._AttributeBody {
	func destroy()
}

extension AttributeGraph.ObservedAttribute {
	public static func _destroySelf(_ pointer: Swift.UnsafeMutableRawPointer)
	public static var _hasDestroySelf: Swift.Bool { get }
}

// MARK: - Graph Related

// MARK: - AGGraph

extension AttributeGraph.AGGraph {
	public static func typeIndex(
		ctx: AGGraphContext,
		body: AttributeGraph._AttributeBody.Type,
		valueType: AGTypeID,
		flags: AGAttributeTypeFlags,
		update: AttributeUpdateBlock
	) -> Int
}

extension AttributeGraph.AGGraph {
	@_silgen_name("AGGraphStartProfiling")
	public static func startProfiling(_ graph: AttributeGraph.AGGraph? = nil)

	@_silgen_name("AGGraphStopProfiling")
	public static func stopProfiling(_ graph: AttributeGraph.AGGraph? = nil)
}

extension AttributeGraph.AGGraph {
	@_silgen_name("AGGraphSetInvalidationCallback")
	public static func setInvalidationCallback(_ graph: AttributeGraph.AGGraph, callback: ((AGAttribute) -> Void)?)

	@_silgen_name("AGGraphSetUpdateCallback")
	public static func setUpdateCallback(_ graph: AttributeGraph.AGGraph, callback: (() -> Void)?)
}

extension AttributeGraph.AGGraph {
	@_transparent
	@inline(__always)
	public var mainUpdates: Swift.Int { Swift.numericCast(counter(for: ._10)) }
}

extension AttributeGraph.AGGraph {
	public static func withoutUpdate<Value>(_ body: () -> Value) -> Value
}

// MARK: - AGSubgraph

extension AttributeGraph.AGSubgraph {
	public func addObserver(_ observer: () -> Void) -> Swift.Int
	public func apply<Value>(_ body: () -> Value) -> Value
	public func forEach(_ flags: AGAttributeFlags, _ callback: (AGAttribute) -> Void)
}

extension AttributeGraph.AGSubgraph {
	public static func beginTreeElement<Value>(value: AttributeGraph.Attribute<Value>, flags: Swift.UInt32)
	public static func endTreeElement<Value>(value: AttributeGraph.Attribute<Value>)
	public static func addTreeValue<Value>(_ value: AttributeGraph.Attribute<Value>, forKey key: Swift.UnsafePointer<Int8>, flags: Swift.UInt32)
}

// MARK: - Rule Related

// MARK: - Rule

public protocol Rule: AttributeGraph._AttributeBody {
    associatedtype Value
    static var initialValue: Self.Value? { get }
    var value: Self.Value { get }
}

extension AttributeGraph.Rule {
    public static var initialValue: Self.Value? { get }
	public static func _update(_ pointer: Swift.UnsafeMutableRawPointer, attribute: AGAttribute)
	public static func _updateDefault(_ pointer: Swift.UnsafeMutableRawPointer)
}

extension AttributeGraph.Rule {
	public var attribute: AttributeGraph.Attribute<Value> { get }
	public var context: AttributeGraph.RuleContext<Value> { get }
}

extension AttributeGraph.Rule where Self: Swift.Hashable {
	public func cachedValueIfExists(
		options: AGCachedValueOptions = [],
		owner: AGAttribute?
	) -> Value?

	public func cachedValue(
		options: AGCachedValueOptions = [],
		owner: AGAttribute?
	) -> Value

	public static func _cachedValue(
		options: AGCachedValueOptions = [],
		owner: AGAttribute?,
		hashValue: Swift.Int,
		bodyPtr: Swift.UnsafeRawPointer,
		update: () -> (Swift.UnsafeMutableRawPointer, AGAttribute) -> ()
	) -> Swift.UnsafePointer<Value>
}

// MARK: - StateRule

public protocol StatefulRule: AttributeGraph._AttributeBody {
	associatedtype Value
	static var initialValue: Value? { get }
	mutating func updateValue()
}

extension AttributeGraph.StatefulRule {
	public static var initialValue: Self.Value? { get }
	public static func _update(_ pointer: Swift.UnsafeMutableRawPointer, attribute: AGAttribute)
	public static func _updateDefault(_ pointer: Swift.UnsafeMutableRawPointer)
}

extension AttributeGraph.StatefulRule {
	public var attribute: AttributeGraph.Attribute<Value> { get }
	public var context: AttributeGraph.RuleContext<Value> { get }
	public var value: Value { unsafeAddress nonmutating set }
	public var hasValue: Bool { get }
}

// MARK: - RuleContext

@frozen
public struct RuleContext<Value> {
	public var attribute: AttributeGraph.Attribute<Value>
	public init(attribute: AttributeGraph.Attribute<Value>)
	public subscript<V>(attribute: AttributeGraph.Attribute<V>) -> V { unsafeAddress }
	public subscript<V>(weakAttribute: AttributeGraph.WeakAttribute<V>) -> V? { get }
	public subscript<V>(optionalAttribute: AttributeGraph.OptionalAttribute<V>) -> V? { get }
	public var value: Value { unsafeAddress nonmutating set }
	public var hasValue: Bool
	public func valueAndFlags<V>(of input: AttributeGraph.Attribute<V>, options: AGValueOptions = []) -> (value: V, flags: AGChangedValueFlags)
	public func changedValue<V>(of input: AttributeGraph.Attribute<V>, options: AGValueOptions = []) -> (value: V, changed: Swift.Bool)
	public func update(body: () -> Void)
}

// MARK: - AnyRuleContext

@frozen
public struct AnyRuleContext {
	public var attribute: AGAttribute
	public init(attribute: AGAttribute)
	public init<V>(_ context: AttributeGraph.RuleContext<V>)
	public subscript<V>(attribute: AttributeGraph.Attribute<V>) -> V { unsafeAddress }
	public subscript<V>(weakAttribute: AttributeGraph.WeakAttribute<V>) -> V? { get }
	public subscript<V>(optionalAttribute: AttributeGraph.OptionalAttribute<V>) -> V? { get }
	public func valueAndFlags<V>(of input: AttributeGraph.Attribute<V>, options: AGValueOptions = []) -> (value: V, flags: AGChangedValueFlags)
	public func changedValue<V>(of input: AttributeGraph.Attribute<V>, options: AGValueOptions = []) -> (value: V, changed: Swift.Bool)
	public func update(body: () -> Void)
	public func unsafeCast<V>(to _: V.Type) -> AttributeGraph.RuleContext<V>
}

// MARK: - Runtime Related

// MARK: - CompareValues

public func compareValues<A>(_ lhs: A, _ rhs: A, mode: AGComparisonMode = ._3) -> Swift.Bool
public func compareValues<A>(_ lhs: A, _ rhs: A, options: AGComparisonOptions) -> Swift.Bool

// MARK: - AGTypeID

extension AGTypeID: Swift.CustomStringConvertible {
    public init(_ type: Any.Type)
    public var type: Any.Type { get }
    public var description: String { get }
    public func forEachField(
        options: AGTypeApplyOptions,
        do body: (UnsafePointer<Int8>, Int, Any.Type) -> Bool
    ) -> Bool
}

// MARK: - AGTupleType

extension AGTupleType {
    public init(_ type: [Any.Type])
    public init(_ type: Any.Type)
    public var type: Any.Type { get }
    public var isEmpty: Swift.Bool { get }
    public var indices: Swift.Range<Swift.Int> { get }
    public func type(at index: Swift.Int) -> Any.Type
}

// MARK: - AGTypeApplyEnumData

@discardableResult
public func withUnsafePointerToEnumCase<T>(
    of value: Swift.UnsafeMutablePointer<T>,
    do body: (Swift.Int, Any.Type, Swift.UnsafeRawPointer) -> Void
) -> Swift.Bool

@discardableResult
public func withUnsafeMutablePointerToEnumCase<T>(
    of value: UnsafeMutablePointer<T>,
    do body: (Swift.Int, Any.Type, Swift.UnsafeMutableRawPointer) -> Void
) -> Swift.Bool

// MARK: - AGTypeApplyFields

@_silgen_name("AGTypeApplyFields")
public func AGTypeApplyFields(
    _ type: Any.Type,
    body: (UnsafePointer<Int8>, Int, Any.Type) -> Void
)

@_silgen_name("AGTypeApplyFields2")
public func AGTypeApplyFields2(
    _ type: Any.Type,
    options: AGTypeApplyOptions,
    body: (UnsafePointer<Int8>, Int, Any.Type) -> Bool
) -> Bool

// MARK: - PointerOffset

@frozen
public struct PointerOffset<Base, Member> {
	public var byteOffset: Swift.Int
	public init(byteOffset: Swift.Int)
}
extension AttributeGraph.PointerOffset {
	public static func + <A>(_ lhs: AttributeGraph.PointerOffset<Base, A>, _ rhs: AttributeGraph.PointerOffset<A, Member>) -> AttributeGraph.PointerOffset<Base, Member>
}
extension AttributeGraph.PointerOffset {
	public static func invalidScenePointer() -> Swift.UnsafeMutablePointer<Base>
	public static func of(_ member: inout Member) -> AttributeGraph.PointerOffset<Base, Member>
	public static func offset(_ body: (inout Base) -> AttributeGraph.PointerOffset<Base, Member>) -> PointerOffset<Base, Member>
}
extension AttributeGraph.PointerOffset where Base == Member {
	public init()
}
extension Swift.UnsafePointer {
	public subscript<Member>(offset offset: AttributeGraph.PointerOffset<Pointee, Member>) -> Member {
		unsafeAddress
	}
	public static func + <Member>(_ lhs: Swift.UnsafePointer<Pointee>, _ rhs: AttributeGraph.PointerOffset<Pointee, Member>) -> Swift.UnsafePointer<Member>
}
extension Swift.UnsafeMutablePointer {
	public subscript<Member>(offset offset: AttributeGraph.PointerOffset<Pointee, Member>) -> Member {
		unsafeAddress
		nonmutating unsafeMutableAddress
	}
	public static func + <Member>(_ lhs: Swift.UnsafeMutablePointer<Pointee>, _ rhs: AttributeGraph.PointerOffset<Pointee, Member>) -> Swift.UnsafeMutablePointer<Member>
}
